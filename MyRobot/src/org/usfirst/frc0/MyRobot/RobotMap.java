// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.MyRobot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static SpeedController leftDriveMotor;
	public static SpeedController rightDriveMotor;
	public static SpeedController winchMotor;
	public static SpeedController binWinchMotor;
	public static SpeedController binSwingMotor;
	
	public static DigitalInput deploySwitch;
	public static DigitalInput swingLeftSwitch;
	public static DigitalInput swingRightSwitch;
	public static DigitalInput detectCanButton;
	
	public static RobotDrive robotDrive;
	
	public static DoubleSolenoid grabberSolenoid;
	public static DoubleSolenoid shifterSolenoid;
	public static DoubleSolenoid binArmSolenoid;
	
	public static Compressor compressor;


	public static int leftDriveMotorPin = 0;
	public static int rightDriveMotorPin = 1;
	
	public static int deploySwitchPin = 0;
	public static int swingLeftSwitchPin = 1;
	public static int swingRightSwitchPin = DigitalInput(2);
	public static int detectCanButtonPin = DigitalInput(3);
	
	public static int binWinchMotorPin = 4;
	public static int binSwingMotorPin = 5;
	
	public static int winchMotorPin = 9;
	// solenoid pins
	public static int grabberSolenoidOpenPin = 6;
	public static int grabberSolenoidClosePin = 7;
	public static int shifterSolenoidUpPin = 4;
	public static int shifterSolenoidDownPin = 5;
	public static int binArmSolenoidExtendPin = 0;
	public static int binArmSolenoidRetractPin = 1;

	public static void init() {
		leftDriveMotor = new Talon(leftDriveMotorPin);
		LiveWindow.addActuator("driveTrain", "Left Motor",
				(Talon) leftDriveMotor);

		rightDriveMotor = new Talon(rightDriveMotorPin);
		LiveWindow.addActuator("driveTrain", "Right Motor",
				(Talon) rightDriveMotor);

		binWinchMotor = new Talon(binWinchMotorPin);
		binSwingMotor = new Talon(binSwingMotorPin);
		
		deploySwitch = new DigitalInput(0);
		swingLeftSwitchPin = DigitalInput(1);
		swingRightSwitchPin = DigitalInput(2);
		detectCanButtonPin = DigitalInput(3);
		
		
		
		shifterSolenoid = new DoubleSolenoid(shifterSolenoidUpPin, shifterSolenoidDownPin);
		LiveWindow.addActuator("driveTrain", "Gearbox Shifter",
				(DoubleSolenoid) shifterSolenoid);
		
		grabberSolenoid = new DoubleSolenoid(grabberSolenoidOpenPin, grabberSolenoidClosePin);
		LiveWindow.addActuator("grabberArm", "Grabber Solenoid",
				(DoubleSolenoid) grabberSolenoid);
		
		binArmSolenoid = new DoubleSolenoid(binArmSolenoidExtendPin, binArmSolenoidRetractPin);

		compressor = new Compressor();
		LiveWindow.addActuator("grabberArm", "compressor",
				(Compressor) compressor);

		winchMotor = new Talon(winchMotorPin);
		LiveWindow.addActuator("chainLifter", "Elevator Motor",
				(Talon) winchMotor);

		robotDrive = new RobotDrive(leftDriveMotor, rightDriveMotor);

		robotDrive.setSafetyEnabled(true);
		robotDrive.setExpiration(0.1);
		robotDrive.setSensitivity(0.5);
		robotDrive.setMaxOutput(1.0);

		robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, false);
		robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, false);
		
	}

	private static int DigitalInput(int i) {
		// TODO Auto-generated method stub
		return 0;
	}
}
