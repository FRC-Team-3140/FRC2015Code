// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.MyRobot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// Instantiating Speed Controllers
	public static SpeedController leftDriveMotor;
	public static SpeedController rightDriveMotor;
	public static SpeedController winchMotor;
	public static SpeedController binWinchMotor;
	
	public static PIDController leftPID;
	public static PIDController rightPID;
	// Instantiating RobotDrive
	public static RobotDrive robotDrive;
	// Instantiating Solenoids
	public static DoubleSolenoid grabberSolenoid;
	public static DoubleSolenoid shifterSolenoid;
	// Instantiating Compressor
	public static Compressor compressor;
	// Instantiating the limit switches
	public static DigitalInput topLimitSwitch;
	public static DigitalInput bottomLimitSwitch;
	public static DigitalInput leftGrabberSwitch;
	public static DigitalInput rightGrabberSwitch;
	// Instantiating the encoders
	public static Encoder leftEncoder;
	public static Encoder rightEncoder;
	public static Encoder winchEncoder;

	// Motor pins
	public static int leftDriveMotorPin = 0;
	public static int rightDriveMotorPin = 1;
	public static int winchMotorPin = 9;
	public static int binWinchMotorPin = 8;
	// Solenoid pins
	public static int grabberSolenoidOpenPin = 6;
	public static int grabberSolenoidClosePin = 7;
	public static int shifterSolenoidUpPin = 4;
	public static int shifterSolenoidDownPin = 5;
	
	public static double Kp = 1.0;
	public static double Ki = 0.0;
	public static double Kd = 0.0;
	public static double Kf = 0.0;

	// Linking the instantiations to the pins
	@SuppressWarnings("deprecation")
	public static void init() {
		leftDriveMotor = new Talon(leftDriveMotorPin);
		LiveWindow.addActuator("driveTrain", "Left Motor",
				(Talon) leftDriveMotor);

		rightDriveMotor = new Talon(rightDriveMotorPin);
		LiveWindow.addActuator("driveTrain", "Right Motor",
				(Talon) rightDriveMotor);

		shifterSolenoid = new DoubleSolenoid(shifterSolenoidUpPin,
				shifterSolenoidDownPin);
		LiveWindow.addActuator("driveTrain", "Gearbox Shifter",
				(DoubleSolenoid) shifterSolenoid);

		winchMotor = new Talon(winchMotorPin);
		LiveWindow.addActuator("chainLifter", "Elevator Motor",
				(Talon) winchMotor);

		binWinchMotor = new Talon(binWinchMotorPin);
		// ENCODERS AND PID
		// SHENANIGANS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		leftEncoder = new Encoder(2, 3);
		//SmartDashboard.putNumber("Left Encoder", leftEncoder.getRate());
		leftEncoder.setDistancePerPulse(0.073631);
		leftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
		leftPID = new PIDController(Kp, Ki, Kd, Kf, leftEncoder, leftDriveMotor);

		
		rightEncoder = new Encoder(1, 0);
		//SmartDashboard.putNumber("Right Encoder", rightEncoder.getRate());
		rightEncoder.setDistancePerPulse(0.073631);
		rightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
		rightPID = new PIDController(Kp, Ki, Kd, Kf, rightEncoder, rightDriveMotor);
		
		topLimitSwitch = new DigitalInput(8);
		bottomLimitSwitch = new DigitalInput(9);
		
		robotDrive = new RobotDrive(leftDriveMotor, rightDriveMotor);

		robotDrive.setSafetyEnabled(true);
		robotDrive.setExpiration(0.1);
		robotDrive.setSensitivity(0.5);
		robotDrive.setMaxOutput(1.0);

		robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, false);
		robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, false);

		grabberSolenoid = new DoubleSolenoid(grabberSolenoidOpenPin,
				grabberSolenoidClosePin);
		LiveWindow.addActuator("grabberArm", "Grabber Solenoid",
				(DoubleSolenoid) grabberSolenoid);

		compressor = new Compressor();
		LiveWindow.addActuator("grabberArm", "compressor",
				(Compressor) compressor);

	}
}
