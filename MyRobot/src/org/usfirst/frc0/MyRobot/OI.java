// RobotBui*lder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.MyRobot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	// // CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	// // TRIGGERING COMMANDS WITH BUT
	// Once you have a button, it's trivial to bind it to rrtrjn
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private enum JoystickMode {
		XBOX_MODE, DUAL_MODE, TRUAL_MODE
	}

	private static JoystickMode mode = JoystickMode.DUAL_MODE;
	private final static int leftJoystick = 0;
	private final static int rightJoystick = 1;
	private final static int xboxJoystick = 0;
	private Joystick joystick[];
	private Button liftUpButton;
	private Button liftDownButton;
	private Button grabberCloseButton;
	private Button grabberOpenButton;

	private boolean lowGear = false;
	private static double throttle = 1;

	
	private static final double xboxDeadzone = 0.03;
	private static final double joystickDeadzone = 0.02;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// One joystick for xbox controller, two for otherwise.
		switch (mode) {
		case TRUAL_MODE: {
			joystick = new Joystick[3];
			// to-do, never.
			break;
		}
		case DUAL_MODE: {
			joystick = new Joystick[2];
			joystick[leftJoystick] = new Joystick(0);
			joystick[rightJoystick] = new Joystick(1);
			liftUpButton = new JoystickButton(joystick[0], 1);
			liftDownButton = new JoystickButton(joystick[0], 2);
			grabberOpenButton = new JoystickButton(joystick[1], 1);
			grabberCloseButton = new JoystickButton(joystick[1], 2);
			break;
		}
		case XBOX_MODE: {
			joystick = new Joystick[1];
			joystick[xboxJoystick] = new Joystick(0);
			liftUpButton = new JoystickButton(joystick[0], 1);
			liftDownButton = new JoystickButton(joystick[0], 2);
			grabberOpenButton = new JoystickButton(joystick[0], 3);
			grabberCloseButton = new JoystickButton(joystick[0], 4);
			break;
		}
		}
	}

	private double joystickDeadzone(double rawJoystickValue,
			double joystickDeadzone) {
		if (Math.abs(rawJoystickValue) > joystickDeadzone) {
			return rawJoystickValue;
		}

		return 0.0;
	}
	
	private double joystickAdjustment(double rawJoystickValue) {
		
		return throttle * rawJoystickValue;
	}

	// returns the value of the y axis on the right joystick and sets the
	// low gear status to change if they are pressing the button
	
	private double getRawRightDriveAxis() {
		switch (mode) {
		case TRUAL_MODE: {
			//to do, never
			return 0;
		}
		case DUAL_MODE: {
			return joystickDeadzone(joystick[rightJoystick].getRawAxis(1), joystickDeadzone);
		}
		case XBOX_MODE: {
			return joystickDeadzone(joystick[xboxJoystick].getRawAxis(5), xboxDeadzone);
		}
		}
		return Double.NaN;
	}

	public double getRightDriveAxis() {
		return joystickAdjustment(getRawRightDriveAxis());
	}

	// returns the y axis on the left joystick
	private double getRawLeftDriveAxis() {
		switch (mode) {
		case TRUAL_MODE: {
			//to do, never
			return 0;
		}
		case DUAL_MODE: {
			return joystickDeadzone(joystick[leftJoystick].getRawAxis(1), joystickDeadzone);
		}
		case XBOX_MODE: {
			return joystickDeadzone(joystick[xboxJoystick].getRawAxis(2), xboxDeadzone);
		}
		}
		return Double.NaN;
	}

	public double getLeftDriveAxis() {
		return joystickAdjustment(getRawLeftDriveAxis());
	}

	public boolean isInLowGear() {
		return lowGear;
	}

	
	public boolean getGrabberOpenButton() {
		return grabberOpenButton.get();
	}

	public boolean getGrabberCloseButton() {
		return grabberCloseButton.get();
	}
	
	public boolean getLiftUpButton() {
		return liftUpButton.get();
	}

	public boolean getLiftDownButton() {
		return liftDownButton.get();
	}
	
	public double getLiftThrottle() {
		return 1;
	}

}
