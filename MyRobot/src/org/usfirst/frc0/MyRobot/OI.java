// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.MyRobot;

import org.usfirst.frc0.MyRobot.commands.*;

import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Joystick joystick[];
    private Button liftUpButton;
    private Button liftDownButton;
    

    private static final int joystickPin = 0;
    private static final int tankJoystickPin = 1;
    
    private static double speedMultiplier = 0.50;
    private boolean lowGear = false;

    private static final double xboxDeadzone = 0.03;
    private static final double joystickDeadzone = 0.02;
    private static final double triggerDeadzone = 0.01;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	joystick = new Joystick[2];
        joystick[0] = new Joystick(joystickPin);
        try {
        	joystick[1] = new Joystick(tankJoystickPin);
        } catch (IndexOutOfBoundsException failure) {
      
        } 
        liftUpButton = new JoystickButton(joystick[0], 1);
        liftDownButton = new JoystickButton (joystick[0], 2);
 }
    
    private double joystickTolerance(double rawJoystickValue,
    		double joystickTolerance) {
    	if (rawJoystickValue > joystickTolerance) {
    		return rawJoystickValue;
    	}
    	return 0.0;
    }
    
    // returns the value of the y axis on the right joystick and sets the 
    // low gear status to change if they are pressing the button
    private double getRawRightDriveAxis() {
    	if (joystick.length > 1) {
    		return joystick[1].getRawAxis(2);
    	}
    	if (joystick[0].getRawButton(5)) {
    		lowGear = !lowGear;
    	}
    	return joystick[0].getRawAxis(5);
    }

    public double getRightDriveAxis() {
        if (joystick.length > 1) {
        	speedMultiplier = joystick[0].getRawAxis(4);
            return joystickTolerance(getRawRightDriveAxis(), joystickDeadzone);
        }
        speedMultiplier = lowGear ? 0.50:1;
        return speedMultiplier * joystickTolerance(getRawRightDriveAxis(), xboxDeadzone);
    }
    
    // returns the y axis on the left joystick
    private double getRawLeftDriveAxis() {
        if (joystick.length > 1) {
            return joystick[0].getRawAxis(2);
        }
        if (joystick[0].getRawButton(5)) {
        	lowGear = !lowGear;
        }
        return joystick[0].getRawAxis(1);
    }
    
    public double getLeftDriveAxis() {
    	if (joystick.length > 1) {
    		speedMultiplier = joystick[0].getRawAxis(4);
            return joystickTolerance(getRawLeftDriveAxis(), joystickDeadzone);
        }
        speedMultiplier = lowGear ? 0.50:1;
        return speedMultiplier * joystickTolerance(getRawLeftDriveAxis(), xboxDeadzone);
    }
    
    public boolean isInLowGear() {
        return lowGear;
    }
    
   	public boolean getLiftUpButton() {
    	return liftUpButton.get();
   	}
   	
   	public boolean getLiftDownButton() {
   		return liftDownButton.get();
   	}
   	
   	public boolean getLiftStopButton() {
   		return !(getLiftUpButton() | getLiftDownButton());
   	}
}

