// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.MyRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc0.MyRobot.Robot;
import org.usfirst.frc0.MyRobot.commands.AutoDrive.DriveDirection;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {

	public enum StartingPlace {
		LEFT_POS, MIDDLE_POS, RIGHT_POS

	};

	private double moveLift;
	private double drive;
	private double finish;
	private double rotate;

	private DriveDirection turnDirection;

	public static StartingPlace toStartingPlaceEnum(String value) {
		if (value == "left") {
			return StartingPlace.LEFT_POS;
		} else if (value == "middle") {
			return StartingPlace.MIDDLE_POS;
		} else if (value == "right") {
			return StartingPlace.RIGHT_POS;
		}
		return StartingPlace.MIDDLE_POS;
	}

	public static StartingPlace place;

	/*
	 * public long mTime = 1000; public long iTime = System.currentTimeMillis();
	 */
	public AutonomousCommand() {

		place = StartingPlace.MIDDLE_POS;
		moveLift = 1;
		drive = 5;
		finish = 1.5;

		switch (place) {
		case LEFT_POS: {
			drive = drive + finish * 0.5;
			finish = 0;
			rotate =3;
			turnDirection = DriveDirection.LEFT_TURN;
			break;
		}
		case MIDDLE_POS: { // WHAT TO DO HERE???
			rotate = 4;
			turnDirection = DriveDirection.RIGHT_TURN;
			break;
		}
		case RIGHT_POS: {
			rotate = 4;
			turnDirection = DriveDirection.RIGHT_TURN;
			break;
		}
		default:
			break;

		}
		addSequential(new GrabberLift(1.25));
		addSequential(new GrabberClose());
		addSequential(new AutoDrive(moveLift, true));
		addSequential(new AutoDrive(drive, false, DriveDirection.FORWARD));
		addSequential(new AutoDrive(finish, false));
		addSequential(new AutoDrive(rotate, false, turnDirection));
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		/*
		 * long cTime = System.currentTimeMillis(); if(cTime-iTime<=1000){
		 * Robot.driveTrain.setLeftPower(.1);
		 * Robot.driveTrain.setRightPower(.1);
		 */
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Scheduler.getInstance().removeAll();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
