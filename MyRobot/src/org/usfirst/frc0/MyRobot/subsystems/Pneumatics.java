// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.MyRobot.subsystems;

import org.usfirst.frc0.MyRobot.RobotMap;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc0.MyRobot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Pneumatics extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Solenoid arm = RobotMap.littleAmosArm;
    Compressor compressor = RobotMap.littleAmosCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean state;
    
    public Pneumatics() {
    	compressor.setClosedLoopControl(true);
    	state = false;
    }
    
    public void runCompressor() {
    	// Starts compressor and logs the current and state of the pressure valve
    	if(compressor.enabled()) {
    		SmartDashboard.putNumber("compressorCurrent", compressor.getCompressorCurrent());
    		SmartDashboard.putBoolean("switchState", compressor.getPressureSwitchValue());
    	} else if(!compressor.enabled()){
    		compressor.start();
    		SmartDashboard.putBoolean("compressorState", true);
    	}
    }
    
    // Stops compressor or tells driver it is already off 
    public void stopCompressor() {	
    	if(compressor.enabled()){
    		compressor.stop();
    		SmartDashboard.putBoolean("compressorState", false);
    	} else if(!compressor.enabled()){
    		SmartDashboard.putString("mistake", "The compressor is not turned on");
    	}
    }
    
    
    public void move(double length) {
    	arm.set(true);
    	Timer.delay(length);
    	arm.set(false);
    }
    
    public void shift() {
    	state = !state;
    	arm.set(state);
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

